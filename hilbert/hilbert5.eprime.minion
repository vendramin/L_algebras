MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 81
# CSE_active_eliminated_expressions = 318
# CSE_active_total_size = 1148
**VARIABLES**
DISCRETE M_00001_00003 #
{2..3}
DISCRETE M_00001_00004 #
{4..5}
DISCRETE M_00002_00001 #
{1..5}
**CONSTRAINTS**
w-inintervalset(M_00002_00001, [1,1,5,5])
**VARIABLES**
DISCRETE M_00002_00003 #
{1..3}
**CONSTRAINTS**
w-inintervalset(M_00002_00003, [1,1,3,3])
**VARIABLES**
DISCRETE M_00002_00004 #
{4..5}
DISCRETE M_00003_00001 #
{1..5}
**CONSTRAINTS**
w-inintervalset(M_00003_00001, [1,1,5,5])
**VARIABLES**
DISCRETE M_00003_00002 #
{2..5}
**CONSTRAINTS**
w-inintervalset(M_00003_00002, [2,2,5,5])
**VARIABLES**
DISCRETE M_00003_00004 #
{4..5}
DISCRETE M_00004_00001 #
{1..5}
**CONSTRAINTS**
w-inintervalset(M_00004_00001, [1,1,5,5])
**VARIABLES**
DISCRETE M_00004_00002 #
{2..5}
**CONSTRAINTS**
w-inintervalset(M_00004_00002, [2,2,5,5])
**VARIABLES**
DISCRETE M_00004_00003 #
{1..5}
**CONSTRAINTS**
w-inintervalset(M_00004_00003, [1,1,3,3,5,5])
**VARIABLES**
DISCRETE aux0 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], (5*M_00004_00001 + M_00004_00003 + -5))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux0, [2,3,5,5])
**VARIABLES**
DISCRETE aux1 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], (M_00004_00001 + 5*M_00004_00003 + -5))
{1..5}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], (M_00002_00001 + 5*M_00002_00003 + -5))
{1..5}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], (5*M_00002_00003 + M_00002_00004 + -8))
{4..5}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], (M_00002_00001 + 5*M_00002_00004 + -20))
{1..5}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], (M_00003_00002 + 5*M_00003_00004 + -21))
{2..5}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3], (M_00002_00003 + 5*M_00002_00004 + -20))
{1..5}
**CONSTRAINTS**
w-inintervalset(aux27, [1,3,5,5])
**VARIABLES**
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], (-13 + 5*M_00001_00003 + M_00001_00004))
{4..5}
DISCRETE aux46 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 3], (-1 + M_00001_00003))
{1..3}
**CONSTRAINTS**
w-inintervalset(aux46, [1,1,3,3])
**VARIABLES**
DISCRETE aux47 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 2], (-1 + M_00001_00003))
{1..2}
DISCRETE aux48 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([1, 4], (-1 + M_00001_00003))
{1..4}
**CONSTRAINTS**
w-inintervalset(aux48, [1,1,4,4])
**VARIABLES**
DISCRETE aux49 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 1], (-1 + M_00001_00003))
{1..3}
**CONSTRAINTS**
w-inintervalset(aux49, [1,1,3,3])
**VARIABLES**
DISCRETE aux50 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 1], (-1 + M_00001_00003))
{1..2}
DISCRETE aux51 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([2, 4], (-1 + M_00001_00003))
{2..4}
**CONSTRAINTS**
w-inintervalset(aux51, [2,2,4,4])
**VARIABLES**
DISCRETE aux52 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 3], (-1 + M_00001_00003))
{3..4}
DISCRETE aux53 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 2], (-1 + M_00001_00003))
{2..4}
**CONSTRAINTS**
w-inintervalset(aux53, [2,2,4,4])
**VARIABLES**
DISCRETE aux54 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([4, 1], (-1 + M_00001_00003))
{1..4}
**CONSTRAINTS**
w-inintervalset(aux54, [1,1,4,4])
**VARIABLES**
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 4], (-1 + M_00001_00003))
{3..4}
DISCRETE aux56 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([3, 2], (-1 + M_00001_00003))
{2..3}
DISCRETE aux57 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([3, 5], (-3 + M_00001_00004))
{3..5}
**CONSTRAINTS**
w-inintervalset(aux57, [3,3,5,5])
**VARIABLES**
DISCRETE aux58 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([1, 5], (M_00003_00004 + -3))
{1..5}
**CONSTRAINTS**
w-inintervalset(aux58, [1,1,5,5])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([M_00002_00004, 5], (-3 + M_00001_00004))
{4..5}
DISCRETE aux63 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([3, 5], (M_00002_00004 + -3))
{3..5}
**CONSTRAINTS**
w-inintervalset(aux63, [3,3,5,5])
**VARIABLES**
DISCRETE aux64 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([1, 5], (-3 + M_00001_00004))
{1..5}
**CONSTRAINTS**
w-inintervalset(aux64, [1,1,5,5])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([2, 5], (M_00003_00004 + -3))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux65, [2,2,5,5])
**VARIABLES**
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: ElementOne([5, M_00002_00003], (-1 + M_00001_00003))
{3..5}
**CONSTRAINTS**
w-inintervalset(aux66, [3,3,5,5])
**VARIABLES**
DISCRETE aux67 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([2, 5], (M_00002_00004 + -3))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux67, [2,2,5,5])
**VARIABLES**
DISCRETE aux69 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([3, 5], (M_00003_00004 + -3))
{3..5}
**CONSTRAINTS**
w-inintervalset(aux69, [3,3,5,5])
**VARIABLES**
DISCRETE aux70 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([2, 5], (-3 + M_00001_00004))
{2..5}
**CONSTRAINTS**
w-inintervalset(aux70, [2,2,5,5])
**VARIABLES**
DISCRETE aux71 #Active-CSE: 6 occurrences of this expression or equivalent: ElementOne([1, 5], (M_00002_00004 + -3))
{1..5}
**CONSTRAINTS**
w-inintervalset(aux71, [1,1,5,5])
**VARIABLES**
DISCRETE aux73 #Active-CSE: 8 occurrences of this expression or equivalent: (-3 + M_00001_00004)
{1..2}
DISCRETE aux74 #Active-CSE: 28 occurrences of this expression or equivalent: (M_00003_00002 + -1)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux74, [1,1,4,4])
**VARIABLES**
DISCRETE aux75 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00002_00004 + -3)
{1..2}
DISCRETE aux76 #Active-CSE: 8 occurrences of this expression or equivalent: (M_00003_00004 + -3)
{1..2}
DISCRETE aux77 #Active-CSE: 16 occurrences of this expression or equivalent: (-1 + M_00001_00003)
{1..2}
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (-19 + 5*M_00001_00004)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux78, [1,1,6,6])
**VARIABLES**
DISCRETE aux79 #Active-CSE: 2 occurrences of this expression or equivalent: (-9 + 5*M_00001_00003)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux79, [1,1,6,6])
**VARIABLES**
DISCRETE aux80 #Active-CSE: 28 occurrences of this expression or equivalent: (M_00004_00002 + -1)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux80, [1,1,4,4])
**VARIABLES**
DISCRETE aux81 #(5*M_00004_00001 + M_00004_00003 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux81, [1,1,3,3,5,5,23,23,25,25])
**VARIABLES**
DISCRETE aux82 #(M_00004_00001 + 5*M_00004_00003 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux82, [1,1,5,5,11,11,15,15,21,21,25,25])
**VARIABLES**
DISCRETE aux83 #(6*M_00003_00001 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux83, [1,1,25,25])
**VARIABLES**
DISCRETE aux84 #(5*M_00003_00001 + M_00003_00002 + -6)
{1..24}
**CONSTRAINTS**
w-inintervalset(aux84, [1,1,4,4,21,21,24,24])
**VARIABLES**
DISCRETE aux85 #(6*M_00004_00001 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux85, [1,1,25,25])
**VARIABLES**
DISCRETE aux86 #(6*M_00004_00003 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux86, [1,1,13,13,25,25])
**VARIABLES**
DISCRETE aux87 #(M_00004_00002 + 5*M_00004_00003 + -6)
{1..24}
**CONSTRAINTS**
w-inintervalset(aux87, [1,1,4,4,11,11,14,14,21,21,24,24])
**VARIABLES**
DISCRETE aux88 #(5*M_00004_00001 + M_00004_00002 + -6)
{1..24}
**CONSTRAINTS**
w-inintervalset(aux88, [1,1,4,4,21,21,24,24])
**VARIABLES**
DISCRETE aux89 #(5*M_00003_00001 + M_00003_00004 + -8)
{1..22}
**CONSTRAINTS**
w-inintervalset(aux89, [1,2,21,22])
**VARIABLES**
DISCRETE aux90 #(M_00003_00001 + 5*M_00003_00002 + -10)
{1..20}
**CONSTRAINTS**
w-inintervalset(aux90, [1,1,5,5,16,16,20,20])
**VARIABLES**
DISCRETE aux91 #(5*M_00003_00001 + -4)
{1..21}
**CONSTRAINTS**
w-inintervalset(aux91, [1,1,21,21])
**VARIABLES**
DISCRETE aux92 #(5*M_00004_00001 + -4)
{1..21}
**CONSTRAINTS**
w-inintervalset(aux92, [1,1,21,21])
**VARIABLES**
DISCRETE aux93 #(5*M_00004_00003 + -4)
{1..21}
**CONSTRAINTS**
w-inintervalset(aux93, [1,1,11,11,21,21])
**VARIABLES**
DISCRETE aux94 #(M_00004_00001 + 5*M_00004_00002 + -10)
{1..20}
**CONSTRAINTS**
w-inintervalset(aux94, [1,1,5,5,16,16,20,20])
**VARIABLES**
DISCRETE aux95 #(5*M_00004_00002 + M_00004_00003 + -10)
{1..20}
**CONSTRAINTS**
w-inintervalset(aux95, [1,1,3,3,5,5,16,16,18,18,20,20])
**VARIABLES**
DISCRETE aux96 #(6*M_00004_00002 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux96, [1,1,19,19])
**VARIABLES**
DISCRETE aux97 #(6*M_00003_00002 + -11)
{1..19}
**CONSTRAINTS**
w-inintervalset(aux97, [1,1,19,19])
**VARIABLES**
DISCRETE aux98 #(5*M_00003_00002 + M_00003_00004 + -13)
{1..17}
**CONSTRAINTS**
w-inintervalset(aux98, [1,2,16,17])
**VARIABLES**
DISCRETE aux99 #(M_00002_00001 + 5*M_00002_00003 + -5)
{1..15}
**CONSTRAINTS**
w-inintervalset(aux99, [1,1,5,5,11,11,15,15])
**VARIABLES**
DISCRETE aux100 #(5*M_00004_00002 + -9)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux100, [1,1,16,16])
**VARIABLES**
DISCRETE aux101 #(5*M_00003_00002 + -9)
{1..16}
**CONSTRAINTS**
w-inintervalset(aux101, [1,1,16,16])
**VARIABLES**
DISCRETE aux102 #(6*M_00002_00003 + -5)
{1..13}
**CONSTRAINTS**
w-inintervalset(aux102, [1,1,13,13])
**VARIABLES**
DISCRETE aux103 #(5*M_00002_00003 + M_00002_00004 + -8)
{1..12}
**CONSTRAINTS**
w-inintervalset(aux103, [1,2,11,12])
**VARIABLES**
DISCRETE aux104 #(M_00002_00001 + 5*M_00002_00004 + -20)
{1..10}
**CONSTRAINTS**
w-inintervalset(aux104, [1,1,5,6,10,10])
**VARIABLES**
DISCRETE aux105 #(5*M_00002_00003 + -4)
{1..11}
**CONSTRAINTS**
w-inintervalset(aux105, [1,1,11,11])
**VARIABLES**
DISCRETE aux106 #(M_00003_00001 + 5*M_00003_00004 + -20)
{1..10}
**CONSTRAINTS**
w-inintervalset(aux106, [1,1,5,6,10,10])
**VARIABLES**
DISCRETE aux107 #(M_00003_00002 + 5*M_00003_00004 + -21)
{1..9}
**CONSTRAINTS**
w-inintervalset(aux107, [1,1,4,4,6,6,9,9])
**VARIABLES**
DISCRETE aux108 #(M_00002_00003 + 5*M_00002_00004 + -20)
{1..8}
**CONSTRAINTS**
w-inintervalset(aux108, [1,1,3,3,6,6,8,8])
**VARIABLES**
DISCRETE aux109 #(-21 + M_00001_00003 + 5*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux109, [1,2,6,7])
**VARIABLES**
DISCRETE aux110 #(-13 + 5*M_00001_00003 + M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux110, [1,2,6,7])
**VARIABLES**
DISCRETE aux111 #(-23 + 6*M_00001_00004)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux111, [1,1,7,7])
**VARIABLES**
DISCRETE aux112 #(6*M_00002_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux112, [1,1,7,7])
**VARIABLES**
DISCRETE aux113 #(-11 + 6*M_00001_00003)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux113, [1,1,7,7])
**VARIABLES**
DISCRETE aux114 #(6*M_00003_00004 + -23)
{1..7}
**CONSTRAINTS**
w-inintervalset(aux114, [1,1,7,7])
**VARIABLES**
DISCRETE aux115 #(5*M_00003_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux115, [1,1,6,6])
**VARIABLES**
DISCRETE aux116 #(5*M_00002_00004 + -19)
{1..6}
**CONSTRAINTS**
w-inintervalset(aux116, [1,1,6,6])
**VARIABLES**
DISCRETE aux117 #(6*M_00002_00001 + -5)
{1..25}
**CONSTRAINTS**
w-inintervalset(aux117, [1,1,25,25])
**VARIABLES**
DISCRETE aux118 #(5*M_00002_00001 + -4)
{1..21}
**CONSTRAINTS**
w-inintervalset(aux118, [1,1,21,21])
**VARIABLES**
DISCRETE aux119 #(5*M_00002_00001 + M_00002_00003 + -5)
{1..23}
**CONSTRAINTS**
w-inintervalset(aux119, [1,1,3,3,23,23])
**VARIABLES**
DISCRETE aux120 #(5*M_00002_00001 + M_00002_00004 + -8)
{1..22}
**CONSTRAINTS**
w-inintervalset(aux120, [1,2,21,22])
**VARIABLES**
DISCRETE aux121 #ElementOne([1, 2, 4, 3, 5], M_00002_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux121, [1,1,5,5])
**VARIABLES**
DISCRETE aux122 #ElementOne([1, 2, 4], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux122, [1,2,4,4])
**VARIABLES**
DISCRETE aux123 #ElementOne([1, 2, 4, 3, 5], M_00004_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux123, [1,1,5,5])
**VARIABLES**
DISCRETE aux124 #ElementOne([2, 4, 3, 5], aux80)
{2..5}
DISCRETE aux125 #ElementOne([1, 2, 4, 3, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux125, [1,1,4,5])
**VARIABLES**
DISCRETE aux126 #ElementOne([1, 2, 4, 3, 5], M_00003_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux126, [1,1,5,5])
**VARIABLES**
DISCRETE aux127 #ElementOne([2, 4, 3, 5], aux74)
{2..5}
DISCRETE aux128 #ElementOne([1, 3, 2, 4, 5], M_00003_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux128, [1,1,5,5])
**VARIABLES**
DISCRETE aux129 #ElementOne([3, 2, 4, 5], aux74)
{2..5}
DISCRETE aux130 #ElementOne([1, 3, 2, 4, 5], M_00002_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux130, [1,1,5,5])
**VARIABLES**
DISCRETE aux131 #ElementOne([1, 3, 2], M_00002_00003)
{1..3}
DISCRETE aux132 #ElementOne([1, 3, 2, 4, 5], M_00004_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux132, [1,1,5,5])
**VARIABLES**
DISCRETE aux133 #ElementOne([1, 3, 2, 4, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux133, [1,2,5,5])
**VARIABLES**
DISCRETE aux134 #ElementOne([3, 2, 4, 5], aux80)
{2..5}
DISCRETE aux135 #ElementOne([1, 4, 2, 3, 5], M_00003_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux135, [1,1,5,5])
**VARIABLES**
DISCRETE aux136 #ElementOne([4, 2, 3, 5], aux74)
{2..5}
DISCRETE aux137 #ElementOne([1, 4, 2, 3, 5], M_00004_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux137, [1,1,5,5])
**VARIABLES**
DISCRETE aux138 #ElementOne([1, 4, 2, 3, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux138, [1,2,5,5])
**VARIABLES**
DISCRETE aux139 #ElementOne([4, 2, 3, 5], aux80)
{2..5}
DISCRETE aux140 #ElementOne([1, 4, 2, 3, 5], M_00002_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux140, [1,1,5,5])
**VARIABLES**
DISCRETE aux141 #ElementOne([1, 4, 2], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux141, [1,2,4,4])
**VARIABLES**
DISCRETE aux142 #ElementOne([1, 3, 4, 2, 5], M_00004_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux142, [1,1,5,5])
**VARIABLES**
DISCRETE aux143 #ElementOne([3, 4, 2, 5], aux80)
{2..5}
DISCRETE aux144 #ElementOne([1, 3, 4, 2, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux144, [1,1,4,5])
**VARIABLES**
DISCRETE aux145 #ElementOne([1, 3, 4, 2, 5], M_00002_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux145, [1,1,5,5])
**VARIABLES**
DISCRETE aux146 #ElementOne([1, 3, 4], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux146, [1,1,3,4])
**VARIABLES**
DISCRETE aux147 #ElementOne([1, 3, 4, 2, 5], M_00003_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux147, [1,1,5,5])
**VARIABLES**
DISCRETE aux148 #ElementOne([3, 4, 2, 5], aux74)
{2..5}
DISCRETE aux149 #ElementOne([1, 4, 3, 2, 5], M_00004_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux149, [1,1,5,5])
**VARIABLES**
DISCRETE aux150 #ElementOne([1, 4, 3, 2, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux150, [1,1,3,3,5,5])
**VARIABLES**
DISCRETE aux151 #ElementOne([4, 3, 2, 5], aux80)
{2..5}
DISCRETE aux152 #ElementOne([1, 4, 3, 2, 5], M_00003_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux152, [1,1,5,5])
**VARIABLES**
DISCRETE aux153 #ElementOne([4, 3, 2, 5], aux74)
{2..5}
DISCRETE aux154 #ElementOne([1, 4, 3, 2, 5], M_00002_00001)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux154, [1,1,5,5])
**VARIABLES**
DISCRETE aux155 #ElementOne([1, 4, 3], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux155, [1,1,3,4])
**VARIABLES**
DISCRETE aux156 #ElementOne([2, 1, 3, 4, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux156, [2,2,5,5])
**VARIABLES**
DISCRETE aux157 #ElementOne([2, 1, 3], M_00002_00003)
{1..3}
DISCRETE aux158 #ElementOne([1, 3, 4, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux158, [1,1,3,5])
**VARIABLES**
DISCRETE aux159 #ElementOne([2, 1, 3, 4, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux159, [2,2,5,5])
**VARIABLES**
DISCRETE aux160 #ElementOne([1, 3, 4, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux160, [1,1,3,5])
**VARIABLES**
DISCRETE aux161 #ElementOne([2, 1, 3, 4, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux161, [2,2,5,5])
**VARIABLES**
DISCRETE aux162 #ElementOne([2, 1, 3, 4, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux162, [2,3,5,5])
**VARIABLES**
DISCRETE aux163 #ElementOne([2, 1, 4, 3, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux163, [2,2,5,5])
**VARIABLES**
DISCRETE aux164 #ElementOne([2, 1, 4], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux164, [1,2,4,4])
**VARIABLES**
DISCRETE aux165 #ElementOne([1, 4, 3, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux165, [1,1,3,5])
**VARIABLES**
DISCRETE aux166 #ElementOne([2, 1, 4, 3, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux166, [2,2,5,5])
**VARIABLES**
DISCRETE aux167 #ElementOne([2, 1, 4, 3, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux167, [2,2,4,5])
**VARIABLES**
DISCRETE aux168 #ElementOne([1, 4, 3, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux168, [1,1,3,5])
**VARIABLES**
DISCRETE aux169 #ElementOne([2, 1, 4, 3, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux169, [2,2,5,5])
**VARIABLES**
DISCRETE aux170 #ElementOne([3, 1, 2], M_00002_00003)
{1..3}
DISCRETE aux171 #ElementOne([3, 1, 2, 4, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux171, [3,3,5,5])
**VARIABLES**
DISCRETE aux172 #ElementOne([1, 2, 4, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux172, [1,2,4,5])
**VARIABLES**
DISCRETE aux173 #ElementOne([3, 1, 2, 4, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux173, [3,3,5,5])
**VARIABLES**
DISCRETE aux174 #ElementOne([1, 2, 4, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux174, [1,2,4,5])
**VARIABLES**
DISCRETE aux175 #ElementOne([3, 1, 2, 4, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux175, [2,3,5,5])
**VARIABLES**
DISCRETE aux176 #ElementOne([3, 1, 2, 4, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux176, [3,3,5,5])
**VARIABLES**
DISCRETE aux177 #ElementOne([4, 1, 2], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux177, [1,2,4,4])
**VARIABLES**
DISCRETE aux178 #ElementOne([4, 1, 2, 3, 5], M_00002_00001)
{4..5}
DISCRETE aux179 #ElementOne([1, 2, 3, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux179, [1,3,5,5])
**VARIABLES**
DISCRETE aux180 #ElementOne([4, 1, 2, 3, 5], M_00003_00001)
{4..5}
DISCRETE aux181 #ElementOne([1, 2, 3, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux181, [1,3,5,5])
**VARIABLES**
DISCRETE aux182 #ElementOne([4, 1, 2, 3, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux182, [2,2,4,5])
**VARIABLES**
DISCRETE aux183 #ElementOne([4, 1, 2, 3, 5], M_00004_00001)
{4..5}
DISCRETE aux184 #ElementOne([3, 1, 4, 2, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux184, [3,3,5,5])
**VARIABLES**
DISCRETE aux185 #ElementOne([3, 1, 4], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux185, [1,1,3,4])
**VARIABLES**
DISCRETE aux186 #ElementOne([1, 4, 2, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux186, [1,2,4,5])
**VARIABLES**
DISCRETE aux187 #ElementOne([3, 1, 4, 2, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux187, [3,3,5,5])
**VARIABLES**
DISCRETE aux188 #ElementOne([3, 1, 4, 2, 5], M_00004_00003)
{3..5}
DISCRETE aux189 #ElementOne([1, 4, 2, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux189, [1,2,4,5])
**VARIABLES**
DISCRETE aux190 #ElementOne([3, 1, 4, 2, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux190, [3,3,5,5])
**VARIABLES**
DISCRETE aux191 #ElementOne([4, 1, 3], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux191, [1,1,3,4])
**VARIABLES**
DISCRETE aux192 #ElementOne([4, 1, 3, 2, 5], M_00002_00001)
{4..5}
DISCRETE aux193 #ElementOne([1, 3, 2, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux193, [1,3,5,5])
**VARIABLES**
DISCRETE aux194 #ElementOne([4, 1, 3, 2, 5], M_00004_00003)
{3..5}
DISCRETE aux195 #ElementOne([4, 1, 3, 2, 5], M_00004_00001)
{4..5}
DISCRETE aux196 #ElementOne([1, 3, 2, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux196, [1,3,5,5])
**VARIABLES**
DISCRETE aux197 #ElementOne([4, 1, 3, 2, 5], M_00003_00001)
{4..5}
DISCRETE aux198 #ElementOne([2, 3, 1, 4, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux198, [2,2,5,5])
**VARIABLES**
DISCRETE aux199 #ElementOne([3, 1, 4, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux199, [1,1,3,5])
**VARIABLES**
DISCRETE aux200 #ElementOne([2, 3, 1], M_00002_00003)
{1..3}
DISCRETE aux201 #ElementOne([2, 3, 1, 4, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux201, [2,2,5,5])
**VARIABLES**
DISCRETE aux202 #ElementOne([2, 3, 1, 4, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux202, [1,2,5,5])
**VARIABLES**
DISCRETE aux203 #ElementOne([2, 3, 1, 4, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux203, [2,2,5,5])
**VARIABLES**
DISCRETE aux204 #ElementOne([3, 1, 4, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux204, [1,1,3,5])
**VARIABLES**
DISCRETE aux205 #ElementOne([2, 4, 1, 3, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux205, [2,2,5,5])
**VARIABLES**
DISCRETE aux206 #ElementOne([4, 1, 3, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux206, [1,1,3,5])
**VARIABLES**
DISCRETE aux207 #ElementOne([2, 4, 1, 3, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux207, [1,2,5,5])
**VARIABLES**
DISCRETE aux208 #ElementOne([2, 4, 1, 3, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux208, [2,2,5,5])
**VARIABLES**
DISCRETE aux209 #ElementOne([4, 1, 3, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux209, [1,1,3,5])
**VARIABLES**
DISCRETE aux210 #ElementOne([2, 4, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux210, [1,2,4,4])
**VARIABLES**
DISCRETE aux211 #ElementOne([2, 4, 1, 3, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux211, [2,2,5,5])
**VARIABLES**
DISCRETE aux212 #ElementOne([2, 1, 4, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux212, [1,2,4,5])
**VARIABLES**
DISCRETE aux213 #ElementOne([3, 2, 1, 4, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux213, [3,3,5,5])
**VARIABLES**
DISCRETE aux214 #ElementOne([3, 2, 1], M_00002_00003)
{1..3}
DISCRETE aux215 #ElementOne([3, 2, 1, 4, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux215, [3,3,5,5])
**VARIABLES**
DISCRETE aux216 #ElementOne([3, 2, 1, 4, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux216, [1,1,3,3,5,5])
**VARIABLES**
DISCRETE aux217 #ElementOne([2, 1, 4, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux217, [1,2,4,5])
**VARIABLES**
DISCRETE aux218 #ElementOne([3, 2, 1, 4, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux218, [3,3,5,5])
**VARIABLES**
DISCRETE aux219 #ElementOne([2, 1, 3, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux219, [1,3,5,5])
**VARIABLES**
DISCRETE aux220 #ElementOne([4, 2, 1, 3, 5], M_00003_00001)
{4..5}
DISCRETE aux221 #ElementOne([4, 2, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux221, [1,2,4,4])
**VARIABLES**
DISCRETE aux222 #ElementOne([4, 2, 1, 3, 5], M_00002_00001)
{4..5}
DISCRETE aux223 #ElementOne([4, 2, 1, 3, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux223, [1,1,4,5])
**VARIABLES**
DISCRETE aux224 #ElementOne([2, 1, 3, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux224, [1,3,5,5])
**VARIABLES**
DISCRETE aux225 #ElementOne([4, 2, 1, 3, 5], M_00004_00001)
{4..5}
DISCRETE aux226 #ElementOne([3, 4, 1, 2, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux226, [3,3,5,5])
**VARIABLES**
DISCRETE aux227 #ElementOne([4, 1, 2, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux227, [1,2,4,5])
**VARIABLES**
DISCRETE aux228 #ElementOne([3, 4, 1, 2, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux228, [1,1,3,3,5,5])
**VARIABLES**
DISCRETE aux229 #ElementOne([3, 4, 1, 2, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux229, [3,3,5,5])
**VARIABLES**
DISCRETE aux230 #ElementOne([4, 1, 2, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux230, [1,2,4,5])
**VARIABLES**
DISCRETE aux231 #ElementOne([3, 4, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux231, [1,1,3,4])
**VARIABLES**
DISCRETE aux232 #ElementOne([3, 4, 1, 2, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux232, [3,3,5,5])
**VARIABLES**
DISCRETE aux233 #ElementOne([3, 1, 2, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux233, [1,3,5,5])
**VARIABLES**
DISCRETE aux234 #ElementOne([4, 3, 1, 2, 5], M_00003_00001)
{4..5}
DISCRETE aux235 #ElementOne([4, 3, 1, 2, 5], M_00004_00003)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux235, [1,1,4,5])
**VARIABLES**
DISCRETE aux236 #ElementOne([3, 1, 2, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux236, [1,3,5,5])
**VARIABLES**
DISCRETE aux237 #ElementOne([4, 3, 1, 2, 5], M_00004_00001)
{4..5}
DISCRETE aux238 #ElementOne([4, 3, 1], M_00002_00003)
{1..4}
**CONSTRAINTS**
w-inintervalset(aux238, [1,1,3,4])
**VARIABLES**
DISCRETE aux239 #ElementOne([4, 3, 1, 2, 5], M_00002_00001)
{4..5}
DISCRETE aux240 #ElementOne([2, 3, 4, 1, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux240, [2,2,5,5])
**VARIABLES**
DISCRETE aux241 #ElementOne([3, 4, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux241, [1,1,3,5])
**VARIABLES**
DISCRETE aux242 #ElementOne([2, 3, 4, 1, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux242, [2,2,4,5])
**VARIABLES**
DISCRETE aux243 #ElementOne([2, 3, 4, 1, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux243, [2,2,5,5])
**VARIABLES**
DISCRETE aux244 #ElementOne([2, 3, 4], M_00002_00003)
{2..4}
DISCRETE aux245 #ElementOne([2, 3, 4, 1, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux245, [2,2,5,5])
**VARIABLES**
DISCRETE aux246 #ElementOne([3, 4, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux246, [1,1,3,5])
**VARIABLES**
DISCRETE aux247 #ElementOne([2, 4, 3, 1, 5], M_00004_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux247, [2,2,5,5])
**VARIABLES**
DISCRETE aux248 #ElementOne([2, 4, 3, 1, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux248, [2,3,5,5])
**VARIABLES**
DISCRETE aux249 #ElementOne([4, 3, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux249, [1,1,3,5])
**VARIABLES**
DISCRETE aux250 #ElementOne([2, 4, 3, 1, 5], M_00003_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux250, [2,2,5,5])
**VARIABLES**
DISCRETE aux251 #ElementOne([4, 3, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux251, [1,1,3,5])
**VARIABLES**
DISCRETE aux252 #ElementOne([2, 4, 3, 1, 5], M_00002_00001)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux252, [2,2,5,5])
**VARIABLES**
DISCRETE aux253 #ElementOne([2, 4, 3], M_00002_00003)
{2..4}
DISCRETE aux254 #ElementOne([2, 4, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux254, [1,2,4,5])
**VARIABLES**
DISCRETE aux255 #ElementOne([3, 2, 4, 1, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux255, [3,3,5,5])
**VARIABLES**
DISCRETE aux256 #ElementOne([3, 2, 4, 1, 5], M_00004_00003)
{3..5}
DISCRETE aux257 #ElementOne([3, 2, 4, 1, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux257, [3,3,5,5])
**VARIABLES**
DISCRETE aux258 #ElementOne([3, 2, 4], M_00002_00003)
{2..4}
DISCRETE aux259 #ElementOne([2, 4, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux259, [1,2,4,5])
**VARIABLES**
DISCRETE aux260 #ElementOne([3, 2, 4, 1, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux260, [3,3,5,5])
**VARIABLES**
DISCRETE aux261 #ElementOne([2, 3, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux261, [1,3,5,5])
**VARIABLES**
DISCRETE aux262 #ElementOne([4, 2, 3, 1, 5], M_00004_00003)
{3..5}
DISCRETE aux263 #ElementOne([4, 2, 3, 1, 5], M_00004_00001)
{4..5}
DISCRETE aux264 #ElementOne([4, 2, 3], M_00002_00003)
{2..4}
DISCRETE aux265 #ElementOne([4, 2, 3, 1, 5], M_00002_00001)
{4..5}
DISCRETE aux266 #ElementOne([2, 3, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux266, [1,3,5,5])
**VARIABLES**
DISCRETE aux267 #ElementOne([4, 2, 3, 1, 5], M_00003_00001)
{4..5}
DISCRETE aux268 #ElementOne([3, 4, 2, 1, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux268, [2,3,5,5])
**VARIABLES**
DISCRETE aux269 #ElementOne([3, 4, 2, 1, 5], M_00004_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux269, [3,3,5,5])
**VARIABLES**
DISCRETE aux270 #ElementOne([4, 2, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux270, [1,2,4,5])
**VARIABLES**
DISCRETE aux271 #ElementOne([3, 4, 2, 1, 5], M_00003_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux271, [3,3,5,5])
**VARIABLES**
DISCRETE aux272 #ElementOne([4, 2, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux272, [1,2,4,5])
**VARIABLES**
DISCRETE aux273 #ElementOne([3, 4, 2], M_00002_00003)
{2..4}
DISCRETE aux274 #ElementOne([3, 4, 2, 1, 5], M_00002_00001)
{3..5}
**CONSTRAINTS**
w-inintervalset(aux274, [3,3,5,5])
**VARIABLES**
DISCRETE aux275 #ElementOne([4, 3, 2, 1, 5], M_00004_00003)
{2..5}
**CONSTRAINTS**
w-inintervalset(aux275, [2,2,4,5])
**VARIABLES**
DISCRETE aux276 #ElementOne([3, 2, 1, 5], aux80)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux276, [1,3,5,5])
**VARIABLES**
DISCRETE aux277 #ElementOne([4, 3, 2, 1, 5], M_00004_00001)
{4..5}
DISCRETE aux278 #ElementOne([3, 2, 1, 5], aux74)
{1..5}
**CONSTRAINTS**
w-inintervalset(aux278, [1,3,5,5])
**VARIABLES**
DISCRETE aux279 #ElementOne([4, 3, 2, 1, 5], M_00003_00001)
{4..5}
DISCRETE aux280 #ElementOne([4, 3, 2], M_00002_00003)
{2..4}
DISCRETE aux281 #ElementOne([4, 3, 2, 1, 5], M_00002_00001)
{4..5}
**TUPLELIST**
perms 23 5
1 2 4 3 5 
1 3 2 4 5 
1 3 4 2 5 
1 4 2 3 5 
1 4 3 2 5 
2 1 3 4 5 
2 1 4 3 5 
2 3 1 4 5 
2 3 4 1 5 
2 4 1 3 5 
2 4 3 1 5 
3 1 2 4 5 
3 1 4 2 5 
3 2 1 4 5 
3 2 4 1 5 
3 4 1 2 5 
3 4 2 1 5 
4 1 2 3 5 
4 1 3 2 5 
4 2 1 3 5 
4 2 3 1 5 
4 3 1 2 5 
4 3 2 1 5 
**VARIABLES**
ALIAS perms[23,5]=[[1, 2, 4, 3, 5], [1, 3, 2, 4, 5], [1, 3, 4, 2, 5], [1, 4, 2, 3, 5], [1, 4, 3, 2, 5], [2, 1, 3, 4, 5], [2, 1, 4, 3, 5], [2, 3, 1, 4, 5], [2, 3, 4, 1, 5], [2, 4, 1, 3, 5], [2, 4, 3, 1, 5], [3, 1, 2, 4, 5], [3, 1, 4, 2, 5], [3, 2, 1, 4, 5], [3, 2, 4, 1, 5], [3, 4, 1, 2, 5], [3, 4, 2, 1, 5], [4, 1, 2, 3, 5], [4, 1, 3, 2, 5], [4, 2, 1, 3, 5], [4, 2, 3, 1, 5], [4, 3, 1, 2, 5], [4, 3, 2, 1, 5]]
**TUPLELIST**
inverses 23 5
1 2 4 3 5 
1 3 2 4 5 
1 4 2 3 5 
1 3 4 2 5 
1 4 3 2 5 
2 1 3 4 5 
2 1 4 3 5 
3 1 2 4 5 
4 1 2 3 5 
3 1 4 2 5 
4 1 3 2 5 
2 3 1 4 5 
2 4 1 3 5 
3 2 1 4 5 
4 2 1 3 5 
3 4 1 2 5 
4 3 1 2 5 
2 3 4 1 5 
2 4 3 1 5 
3 2 4 1 5 
4 2 3 1 5 
3 4 2 1 5 
4 3 2 1 5 
**VARIABLES**
ALIAS inverses[23,5]=[[1, 2, 4, 3, 5], [1, 3, 2, 4, 5], [1, 4, 2, 3, 5], [1, 3, 4, 2, 5], [1, 4, 3, 2, 5], [2, 1, 3, 4, 5], [2, 1, 4, 3, 5], [3, 1, 2, 4, 5], [4, 1, 2, 3, 5], [3, 1, 4, 2, 5], [4, 1, 3, 2, 5], [2, 3, 1, 4, 5], [2, 4, 1, 3, 5], [3, 2, 1, 4, 5], [4, 2, 1, 3, 5], [3, 4, 1, 2, 5], [4, 3, 1, 2, 5], [2, 3, 4, 1, 5], [2, 4, 3, 1, 5], [3, 2, 4, 1, 5], [4, 2, 3, 1, 5], [3, 4, 2, 1, 5], [4, 3, 2, 1, 5]]
**SEARCH**
PRINT[[M_00001_00003],[M_00001_00004],[M_00002_00001],[M_00002_00003],[M_00002_00004],[M_00003_00001],[M_00003_00002],[M_00003_00004],[M_00004_00001],[M_00004_00002],[M_00004_00003]]
VARORDER STATIC [M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003]
**CONSTRAINTS**
watchelement_one([1, 2, 4, 3, 5], M_00002_00001, aux121)
watchelement_one([1, 2, 4], M_00002_00003, aux122)
watchelement_one([1, 2, 4, 3, 5], M_00004_00001, aux123)
watchelement_one([2, 4, 3, 5], aux80, aux124)
watchelement_one([1, 2, 4, 3, 5], M_00004_00003, aux125)
watchelement_one([1, 2, 4, 3, 5], M_00003_00001, aux126)
watchelement_one([2, 4, 3, 5], aux74, aux127)
watchelement_one([1, 3, 2, 4, 5], M_00003_00001, aux128)
watchelement_one([3, 2, 4, 5], aux74, aux129)
watchelement_one([1, 3, 2, 4, 5], M_00002_00001, aux130)
watchelement_one([1, 3, 2], M_00002_00003, aux131)
watchelement_one([1, 3, 2, 4, 5], M_00004_00001, aux132)
watchelement_one([1, 3, 2, 4, 5], M_00004_00003, aux133)
watchelement_one([3, 2, 4, 5], aux80, aux134)
watchelement_one([1, 4, 2, 3, 5], M_00003_00001, aux135)
watchelement_one([4, 2, 3, 5], aux74, aux136)
watchelement_one([1, 4, 2, 3, 5], M_00004_00001, aux137)
watchelement_one([1, 4, 2, 3, 5], M_00004_00003, aux138)
watchelement_one([4, 2, 3, 5], aux80, aux139)
watchelement_one([1, 4, 2, 3, 5], M_00002_00001, aux140)
watchelement_one([1, 4, 2], M_00002_00003, aux141)
watchelement_one([1, 3, 4, 2, 5], M_00004_00001, aux142)
watchelement_one([3, 4, 2, 5], aux80, aux143)
watchelement_one([1, 3, 4, 2, 5], M_00004_00003, aux144)
watchelement_one([1, 3, 4, 2, 5], M_00002_00001, aux145)
watchelement_one([1, 3, 4], M_00002_00003, aux146)
watchelement_one([1, 3, 4, 2, 5], M_00003_00001, aux147)
watchelement_one([3, 4, 2, 5], aux74, aux148)
watchelement_one([1, 4, 3, 2, 5], M_00004_00001, aux149)
watchelement_one([1, 4, 3, 2, 5], M_00004_00003, aux150)
watchelement_one([4, 3, 2, 5], aux80, aux151)
watchelement_one([1, 4, 3, 2, 5], M_00003_00001, aux152)
watchelement_one([4, 3, 2, 5], aux74, aux153)
watchelement_one([1, 4, 3, 2, 5], M_00002_00001, aux154)
watchelement_one([1, 4, 3], M_00002_00003, aux155)
watchelement_one([2, 1, 3, 4, 5], M_00002_00001, aux156)
watchelement_one([2, 1, 3], M_00002_00003, aux157)
watchelement_one([1, 3, 4, 5], aux74, aux158)
watchelement_one([2, 1, 3, 4, 5], M_00003_00001, aux159)
watchelement_one([1, 3, 4, 5], aux80, aux160)
watchelement_one([2, 1, 3, 4, 5], M_00004_00001, aux161)
watchelement_one([2, 1, 3, 4, 5], M_00004_00003, aux162)
watchelement_one([2, 1, 4, 3, 5], M_00002_00001, aux163)
watchelement_one([2, 1, 4], M_00002_00003, aux164)
watchelement_one([1, 4, 3, 5], aux80, aux165)
watchelement_one([2, 1, 4, 3, 5], M_00004_00001, aux166)
watchelement_one([2, 1, 4, 3, 5], M_00004_00003, aux167)
watchelement_one([1, 4, 3, 5], aux74, aux168)
watchelement_one([2, 1, 4, 3, 5], M_00003_00001, aux169)
watchelement_one([3, 1, 2], M_00002_00003, aux170)
watchelement_one([3, 1, 2, 4, 5], M_00002_00001, aux171)
watchelement_one([1, 2, 4, 5], aux74, aux172)
watchelement_one([3, 1, 2, 4, 5], M_00003_00001, aux173)
watchelement_one([1, 2, 4, 5], aux80, aux174)
watchelement_one([3, 1, 2, 4, 5], M_00004_00003, aux175)
watchelement_one([3, 1, 2, 4, 5], M_00004_00001, aux176)
watchelement_one([4, 1, 2], M_00002_00003, aux177)
watchelement_one([4, 1, 2, 3, 5], M_00002_00001, aux178)
watchelement_one([1, 2, 3, 5], aux74, aux179)
watchelement_one([4, 1, 2, 3, 5], M_00003_00001, aux180)
watchelement_one([1, 2, 3, 5], aux80, aux181)
watchelement_one([4, 1, 2, 3, 5], M_00004_00003, aux182)
watchelement_one([4, 1, 2, 3, 5], M_00004_00001, aux183)
watchelement_one([3, 1, 4, 2, 5], M_00002_00001, aux184)
watchelement_one([3, 1, 4], M_00002_00003, aux185)
watchelement_one([1, 4, 2, 5], aux80, aux186)
watchelement_one([3, 1, 4, 2, 5], M_00004_00001, aux187)
watchelement_one([3, 1, 4, 2, 5], M_00004_00003, aux188)
watchelement_one([1, 4, 2, 5], aux74, aux189)
watchelement_one([3, 1, 4, 2, 5], M_00003_00001, aux190)
watchelement_one([4, 1, 3], M_00002_00003, aux191)
watchelement_one([4, 1, 3, 2, 5], M_00002_00001, aux192)
watchelement_one([1, 3, 2, 5], aux80, aux193)
watchelement_one([4, 1, 3, 2, 5], M_00004_00003, aux194)
watchelement_one([4, 1, 3, 2, 5], M_00004_00001, aux195)
watchelement_one([1, 3, 2, 5], aux74, aux196)
watchelement_one([4, 1, 3, 2, 5], M_00003_00001, aux197)
watchelement_one([2, 3, 1, 4, 5], M_00003_00001, aux198)
watchelement_one([3, 1, 4, 5], aux74, aux199)
watchelement_one([2, 3, 1], M_00002_00003, aux200)
watchelement_one([2, 3, 1, 4, 5], M_00002_00001, aux201)
watchelement_one([2, 3, 1, 4, 5], M_00004_00003, aux202)
watchelement_one([2, 3, 1, 4, 5], M_00004_00001, aux203)
watchelement_one([3, 1, 4, 5], aux80, aux204)
watchelement_one([2, 4, 1, 3, 5], M_00003_00001, aux205)
watchelement_one([4, 1, 3, 5], aux74, aux206)
watchelement_one([2, 4, 1, 3, 5], M_00004_00003, aux207)
watchelement_one([2, 4, 1, 3, 5], M_00004_00001, aux208)
watchelement_one([4, 1, 3, 5], aux80, aux209)
watchelement_one([2, 4, 1], M_00002_00003, aux210)
watchelement_one([2, 4, 1, 3, 5], M_00002_00001, aux211)
watchelement_one([2, 1, 4, 5], aux74, aux212)
watchelement_one([3, 2, 1, 4, 5], M_00003_00001, aux213)
watchelement_one([3, 2, 1], M_00002_00003, aux214)
watchelement_one([3, 2, 1, 4, 5], M_00002_00001, aux215)
watchelement_one([3, 2, 1, 4, 5], M_00004_00003, aux216)
watchelement_one([2, 1, 4, 5], aux80, aux217)
watchelement_one([3, 2, 1, 4, 5], M_00004_00001, aux218)
watchelement_one([2, 1, 3, 5], aux74, aux219)
watchelement_one([4, 2, 1, 3, 5], M_00003_00001, aux220)
watchelement_one([4, 2, 1], M_00002_00003, aux221)
watchelement_one([4, 2, 1, 3, 5], M_00002_00001, aux222)
watchelement_one([4, 2, 1, 3, 5], M_00004_00003, aux223)
watchelement_one([2, 1, 3, 5], aux80, aux224)
watchelement_one([4, 2, 1, 3, 5], M_00004_00001, aux225)
watchelement_one([3, 4, 1, 2, 5], M_00003_00001, aux226)
watchelement_one([4, 1, 2, 5], aux74, aux227)
watchelement_one([3, 4, 1, 2, 5], M_00004_00003, aux228)
watchelement_one([3, 4, 1, 2, 5], M_00004_00001, aux229)
watchelement_one([4, 1, 2, 5], aux80, aux230)
watchelement_one([3, 4, 1], M_00002_00003, aux231)
watchelement_one([3, 4, 1, 2, 5], M_00002_00001, aux232)
watchelement_one([3, 1, 2, 5], aux74, aux233)
watchelement_one([4, 3, 1, 2, 5], M_00003_00001, aux234)
watchelement_one([4, 3, 1, 2, 5], M_00004_00003, aux235)
watchelement_one([3, 1, 2, 5], aux80, aux236)
watchelement_one([4, 3, 1, 2, 5], M_00004_00001, aux237)
watchelement_one([4, 3, 1], M_00002_00003, aux238)
watchelement_one([4, 3, 1, 2, 5], M_00002_00001, aux239)
watchelement_one([2, 3, 4, 1, 5], M_00004_00001, aux240)
watchelement_one([3, 4, 1, 5], aux80, aux241)
watchelement_one([2, 3, 4, 1, 5], M_00004_00003, aux242)
watchelement_one([2, 3, 4, 1, 5], M_00002_00001, aux243)
watchelement_one([2, 3, 4], M_00002_00003, aux244)
watchelement_one([2, 3, 4, 1, 5], M_00003_00001, aux245)
watchelement_one([3, 4, 1, 5], aux74, aux246)
watchelement_one([2, 4, 3, 1, 5], M_00004_00001, aux247)
watchelement_one([2, 4, 3, 1, 5], M_00004_00003, aux248)
watchelement_one([4, 3, 1, 5], aux80, aux249)
watchelement_one([2, 4, 3, 1, 5], M_00003_00001, aux250)
watchelement_one([4, 3, 1, 5], aux74, aux251)
watchelement_one([2, 4, 3, 1, 5], M_00002_00001, aux252)
watchelement_one([2, 4, 3], M_00002_00003, aux253)
watchelement_one([2, 4, 1, 5], aux80, aux254)
watchelement_one([3, 2, 4, 1, 5], M_00004_00001, aux255)
watchelement_one([3, 2, 4, 1, 5], M_00004_00003, aux256)
watchelement_one([3, 2, 4, 1, 5], M_00002_00001, aux257)
watchelement_one([3, 2, 4], M_00002_00003, aux258)
watchelement_one([2, 4, 1, 5], aux74, aux259)
watchelement_one([3, 2, 4, 1, 5], M_00003_00001, aux260)
watchelement_one([2, 3, 1, 5], aux80, aux261)
watchelement_one([4, 2, 3, 1, 5], M_00004_00003, aux262)
watchelement_one([4, 2, 3, 1, 5], M_00004_00001, aux263)
watchelement_one([4, 2, 3], M_00002_00003, aux264)
watchelement_one([4, 2, 3, 1, 5], M_00002_00001, aux265)
watchelement_one([2, 3, 1, 5], aux74, aux266)
watchelement_one([4, 2, 3, 1, 5], M_00003_00001, aux267)
watchelement_one([3, 4, 2, 1, 5], M_00004_00003, aux268)
watchelement_one([3, 4, 2, 1, 5], M_00004_00001, aux269)
watchelement_one([4, 2, 1, 5], aux80, aux270)
watchelement_one([3, 4, 2, 1, 5], M_00003_00001, aux271)
watchelement_one([4, 2, 1, 5], aux74, aux272)
watchelement_one([3, 4, 2], M_00002_00003, aux273)
watchelement_one([3, 4, 2, 1, 5], M_00002_00001, aux274)
watchelement_one([4, 3, 2, 1, 5], M_00004_00003, aux275)
watchelement_one([3, 2, 1, 5], aux80, aux276)
watchelement_one([4, 3, 2, 1, 5], M_00004_00001, aux277)
watchelement_one([3, 2, 1, 5], aux74, aux278)
watchelement_one([4, 3, 2, 1, 5], M_00003_00001, aux279)
watchelement_one([4, 3, 2], M_00002_00003, aux280)
watchelement_one([4, 3, 2, 1, 5], M_00002_00001, aux281)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux81, aux0)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux82, aux1)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux83, 5)
watchelement_one([2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux84, M_00003_00002)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux85, 5)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux86, 5)
watchelement_one([2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux87, aux26)
watchelement_one([2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux88, M_00004_00002)
watchelement_one([M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux89, aux29)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux90, aux18)
watchelement_one([5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux91, 5)
watchelement_one([5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux92, 5)
watchelement_one([5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux93, 5)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux94, aux23)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux95, aux27)
watchelement_one([5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux96, 5)
watchelement_one([5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux97, 5)
watchelement_one([M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux98, aux22)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], aux99, aux18)
watchelement_one([5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux100, 5)
watchelement_one([5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux101, 5)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5], aux102, 5)
watchelement_one([M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], aux103, aux22)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux104, aux23)
watchelement_one([5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], aux105, 5)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux106, aux1)
watchelement_one([M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux107, aux26)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3], aux108, aux27)
watchelement_one([M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3], aux109, aux0)
watchelement_one([M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], aux110, aux29)
watchelement_one([5, 5, 1, 2, 3, 4, 5], aux111, 5)
watchelement_one([5, 5, 1, 2, 3, 4, 5], aux112, 5)
watchelement_one([5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5], aux113, 5)
watchelement_one([5, 5, 1, 2, 3, 4, 5], aux114, 5)
watchelement_one([5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002], aux79, M_00003_00002)
watchelement_one([5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], aux79, 5)
watchelement_one([5, 1, 2, 3, 4, 5], aux115, 5)
watchelement_one([5, 1, 2, 3, 4, 5], aux116, 5)
watchelement_one([M_00004_00002, M_00004_00003, 5, 5, 1, 2], aux78, M_00004_00002)
watchelement_one([5, 1, 2, 3, 4, 5], aux78, 5)
watchelement_one([2, 3, 4, 5], aux80, M_00004_00002)
watchelement_one([2, 3, 4, 5], aux74, M_00003_00002)
watchelement_one([1, 2, 3, 4, 5], M_00004_00001, M_00004_00001)
watchelement_one([1, 2, 3, 4, 5], M_00004_00003, M_00004_00003)
watchelement_one([1, 2, 3, 4, 5], M_00002_00001, M_00002_00001)
watchelement_one([1, 2, 3, 4, 5], M_00003_00001, M_00003_00001)
watchelement_one([1, 3], aux77, aux46)
watchelement_one([1, 2], aux77, aux47)
watchelement_one([1, 4], aux77, aux48)
watchelement_one([3, 1], aux77, aux49)
watchelement_one([2, 1], aux77, aux50)
watchelement_one([2, 4], aux77, aux51)
watchelement_one([4, 3], aux77, aux52)
watchelement_one([4, 2], aux77, aux53)
watchelement_one([4, 1], aux77, aux54)
watchelement_one([3, 4], aux77, aux55)
watchelement_one([3, 2], aux77, aux56)
watchelement_one([3, 5], aux73, aux57)
watchelement_one([1, 5], aux76, aux58)
watchelement_one([4, 5], aux75, M_00002_00004)
watchelement_one([M_00002_00004, 5], aux73, aux60)
watchelement_one([4, 5], aux76, M_00003_00004)
watchelement_one([4, 5], aux73, M_00001_00004)
watchelement_one([3, 5], aux75, aux63)
watchelement_one([1, 5], aux73, aux64)
watchelement_one([2, 5], aux76, aux65)
watchelement_one([5, M_00002_00003], aux77, aux66)
watchelement_one([2, 5], aux75, aux67)
watchelement_one([2, 3], aux77, M_00001_00003)
watchelement_one([3, 5], aux76, aux69)
watchelement_one([2, 5], aux73, aux70)
watchelement_one([1, 5], aux75, aux71)
watchelement_one([1, 2, 3], M_00002_00003, M_00002_00003)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux117, 5)
watchelement_one([5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux118, 5)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3], aux119, aux66)
watchelement_one([M_00001_00004, 5, M_00002_00001, 5, M_00002_00003, M_00002_00004, 5, M_00003_00001, M_00003_00002, 5, M_00003_00004, 5, M_00004_00001, M_00004_00002, M_00004_00003, 5, 5, 1, 2, 3, 4, 5], aux120, aux60)
watchelement_one([2, M_00001_00003], aux77, M_00001_00003)
watchelement_one([M_00001_00004, 5], aux73, M_00001_00004)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5], M_00002_00001, 5)
watchelement_one([5, 2, M_00001_00003], M_00002_00003, aux66)
watchelement_one([M_00001_00004, 5], aux75, aux60)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5], M_00003_00001, 5)
watchelement_one([2, M_00001_00003, M_00001_00004, 5], aux74, M_00003_00002)
watchelement_one([M_00001_00004, 5], aux76, aux29)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5], M_00004_00001, 5)
watchelement_one([2, M_00001_00003, M_00001_00004, 5], aux80, M_00004_00002)
watchelement_one([5, 2, M_00001_00003, M_00001_00004, 5], M_00004_00003, aux0)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5], M_00002_00001, M_00002_00001)
watchelement_one([M_00002_00001, 5, M_00002_00003], M_00002_00003, M_00002_00003)
watchelement_one([M_00002_00004, 5], aux75, M_00002_00004)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5], M_00003_00001, aux18)
watchelement_one([5, M_00002_00003, M_00002_00004, 5], aux74, 5)
watchelement_one([M_00002_00004, 5], aux76, aux22)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5], M_00004_00001, aux23)
watchelement_one([5, M_00002_00003, M_00002_00004, 5], aux80, 5)
watchelement_one([M_00002_00001, 5, M_00002_00003, M_00002_00004, 5], M_00004_00003, aux27)
watchelement_one([M_00003_00002, 5], aux77, 5)
watchelement_one([M_00003_00004, 5], aux73, aux29)
watchelement_one([M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], M_00002_00001, aux18)
watchelement_one([M_00003_00001, M_00003_00002, 5], M_00002_00003, 5)
watchelement_one([M_00003_00004, 5], aux75, aux22)
watchelement_one([M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], M_00003_00001, M_00003_00001)
watchelement_one([M_00003_00002, 5, M_00003_00004, 5], aux74, M_00003_00002)
watchelement_one([M_00003_00004, 5], aux76, M_00003_00004)
watchelement_one([M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], M_00004_00001, aux1)
watchelement_one([M_00003_00002, 5, M_00003_00004, 5], aux80, aux26)
watchelement_one([M_00003_00001, M_00003_00002, 5, M_00003_00004, 5], M_00004_00003, 5)
watchelement_one([M_00004_00002, M_00004_00003], aux77, aux0)
watchelement_one([5, 5], aux73, 5)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5], M_00002_00001, aux23)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003], M_00002_00003, aux27)
watchelement_one([5, 5], aux75, 5)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5], M_00003_00001, aux1)
watchelement_one([M_00004_00002, M_00004_00003, 5, 5], aux74, aux26)
watchelement_one([5, 5], aux76, 5)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5], M_00004_00001, M_00004_00001)
watchelement_one([M_00004_00002, M_00004_00003, 5, 5], aux80, M_00004_00002)
watchelement_one([M_00004_00001, M_00004_00002, M_00004_00003, 5, 5], M_00004_00003, M_00004_00003)
sumleq([M_00004_00001,M_00001_00004],9)
sumleq([M_00002_00004,M_00004_00002],9)
sumleq([M_00003_00004,M_00004_00003],9)
lexleq([M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux57, aux51, aux121, aux63, aux122, aux123, aux124, aux125, aux126, aux127, aux69])
lexleq([2, M_00001_00003, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00004_00003],[aux56, 3, aux128, aux129, M_00003_00004, aux130, aux131, aux132, aux133, aux134])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux53, aux57, 4, aux135, aux69, aux136, aux137, aux138, aux139, aux140, aux141, aux63])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux70, 3, aux55, aux142, aux143, aux144, aux145, aux67, aux146, aux147, aux65, aux148])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux70, aux52, 4, aux149, aux150, aux151, aux152, aux65, aux153, aux154, aux67, aux155])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00004_00003],[aux156, aux157, M_00002_00004, 1, aux46, aux158, aux159, aux160, aux161, aux162])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux163, aux63, aux164, 1, aux57, aux48, aux165, aux166, aux167, aux168, aux169, aux69])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00004_00003],[aux170, aux171, M_00002_00004, aux172, aux173, M_00003_00004, 1, aux47, aux174, aux175, aux176])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux177, aux63, aux178, aux179, aux69, aux180, aux181, aux182, aux183, 1, aux47, aux57])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux67, aux184, aux185, aux186, aux187, aux188, 1, aux70, aux48, aux189, aux65, aux190])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux67, aux191, aux192, aux193, aux194, aux195, aux196, aux65, aux197, 1, aux70, aux46])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00004_00003],[aux198, aux199, M_00003_00004, aux49, 3, M_00001_00004, aux200, aux201, aux202, aux203, aux204])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux205, aux69, aux206, aux54, aux57, 4, aux207, aux208, aux209, aux210, aux211, aux63])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00003_00001, M_00003_00002, M_00004_00001, M_00004_00002, M_00004_00003],[aux212, aux213, M_00003_00004, aux214, aux215, aux50, 2, aux216, aux217, aux218])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux219, aux69, aux220, aux221, aux63, aux222, aux223, aux224, aux225, aux50, 2, aux57])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux65, aux226, aux227, aux228, aux229, aux230, aux54, aux70, 4, aux231, aux67, aux232])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux65, aux233, aux234, aux235, aux236, aux237, aux238, aux67, aux239, aux49, aux70, 3])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux240, aux241, aux242, aux64, 3, aux55, aux71, aux243, aux244, aux58, aux245, aux246])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux247, aux248, aux249, aux64, aux52, 4, aux58, aux250, aux251, aux71, aux252, aux253])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux254, aux255, aux256, aux71, aux257, aux258, aux64, 2, aux51, aux58, aux259, aux260])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux261, aux262, aux263, aux71, aux264, aux265, aux58, aux266, aux267, aux64, 2, M_00001_00003])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux268, aux269, aux270, aux58, aux271, aux272, aux64, aux53, 4, aux71, aux273, aux274])
lexleq([2, M_00001_00003, M_00001_00004, M_00002_00001, M_00002_00003, M_00002_00004, M_00003_00001, M_00003_00002, M_00003_00004, M_00004_00001, M_00004_00002, M_00004_00003],[aux275, aux276, aux277, aux58, aux278, aux279, aux71, aux280, aux281, aux64, aux56, 3])
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux81)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00003,-5],aux81)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux82)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00003,-5],aux82)
weightedsumleq([6,1],[M_00003_00001,-5],aux83)
weightedsumgeq([6,1],[M_00003_00001,-5],aux83)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux84)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00002,-6],aux84)
weightedsumleq([6,1],[M_00004_00001,-5],aux85)
weightedsumgeq([6,1],[M_00004_00001,-5],aux85)
weightedsumleq([6,1],[M_00004_00003,-5],aux86)
weightedsumgeq([6,1],[M_00004_00003,-5],aux86)
weightedsumleq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux87)
weightedsumgeq([1,5,1],[M_00004_00002,M_00004_00003,-6],aux87)
weightedsumleq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux88)
weightedsumgeq([5,1,1],[M_00004_00001,M_00004_00002,-6],aux88)
weightedsumleq([5,1,1],[M_00003_00001,M_00003_00004,-8],aux89)
weightedsumgeq([5,1,1],[M_00003_00001,M_00003_00004,-8],aux89)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux90)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00002,-10],aux90)
weightedsumleq([5,1],[M_00003_00001,-4],aux91)
weightedsumgeq([5,1],[M_00003_00001,-4],aux91)
weightedsumleq([5,1],[M_00004_00001,-4],aux92)
weightedsumgeq([5,1],[M_00004_00001,-4],aux92)
weightedsumleq([5,1],[M_00004_00003,-4],aux93)
weightedsumgeq([5,1],[M_00004_00003,-4],aux93)
weightedsumleq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux94)
weightedsumgeq([1,5,1],[M_00004_00001,M_00004_00002,-10],aux94)
weightedsumleq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux95)
weightedsumgeq([5,1,1],[M_00004_00002,M_00004_00003,-10],aux95)
weightedsumleq([6,1],[M_00004_00002,-11],aux96)
weightedsumgeq([6,1],[M_00004_00002,-11],aux96)
weightedsumleq([6,1],[M_00003_00002,-11],aux97)
weightedsumgeq([6,1],[M_00003_00002,-11],aux97)
weightedsumleq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux98)
weightedsumgeq([5,1,1],[M_00003_00002,M_00003_00004,-13],aux98)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux99)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00003,-5],aux99)
weightedsumleq([5,1],[M_00004_00002,-9],aux100)
weightedsumgeq([5,1],[M_00004_00002,-9],aux100)
weightedsumleq([5,1],[M_00003_00002,-9],aux101)
weightedsumgeq([5,1],[M_00003_00002,-9],aux101)
weightedsumleq([6,1],[M_00002_00003,-5],aux102)
weightedsumgeq([6,1],[M_00002_00003,-5],aux102)
weightedsumleq([5,1,1],[M_00002_00003,M_00002_00004,-8],aux103)
weightedsumgeq([5,1,1],[M_00002_00003,M_00002_00004,-8],aux103)
weightedsumleq([1,5,1],[M_00002_00001,M_00002_00004,-20],aux104)
weightedsumgeq([1,5,1],[M_00002_00001,M_00002_00004,-20],aux104)
weightedsumleq([5,1],[M_00002_00003,-4],aux105)
weightedsumgeq([5,1],[M_00002_00003,-4],aux105)
weightedsumleq([1,5,1],[M_00003_00001,M_00003_00004,-20],aux106)
weightedsumgeq([1,5,1],[M_00003_00001,M_00003_00004,-20],aux106)
weightedsumleq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux107)
weightedsumgeq([1,5,1],[M_00003_00002,M_00003_00004,-21],aux107)
weightedsumleq([1,5,1],[M_00002_00003,M_00002_00004,-20],aux108)
weightedsumgeq([1,5,1],[M_00002_00003,M_00002_00004,-20],aux108)
weightedsumleq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux109)
weightedsumgeq([1,1,5],[-21,M_00001_00003,M_00001_00004],aux109)
weightedsumleq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux110)
weightedsumgeq([1,5,1],[-13,M_00001_00003,M_00001_00004],aux110)
weightedsumleq([1,6],[-23,M_00001_00004],aux111)
weightedsumgeq([1,6],[-23,M_00001_00004],aux111)
weightedsumleq([6,1],[M_00002_00004,-23],aux112)
weightedsumgeq([6,1],[M_00002_00004,-23],aux112)
weightedsumleq([1,6],[-11,M_00001_00003],aux113)
weightedsumgeq([1,6],[-11,M_00001_00003],aux113)
weightedsumleq([6,1],[M_00003_00004,-23],aux114)
weightedsumgeq([6,1],[M_00003_00004,-23],aux114)
weightedsumleq([5,1],[M_00003_00004,-19],aux115)
weightedsumgeq([5,1],[M_00003_00004,-19],aux115)
weightedsumleq([5,1],[M_00002_00004,-19],aux116)
weightedsumgeq([5,1],[M_00002_00004,-19],aux116)
weightedsumleq([6,1],[M_00002_00001,-5],aux117)
weightedsumgeq([6,1],[M_00002_00001,-5],aux117)
weightedsumleq([5,1],[M_00002_00001,-4],aux118)
weightedsumgeq([5,1],[M_00002_00001,-4],aux118)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux119)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00003,-5],aux119)
weightedsumleq([5,1,1],[M_00002_00001,M_00002_00004,-8],aux120)
weightedsumgeq([5,1,1],[M_00002_00001,M_00002_00004,-8],aux120)
sumleq([-3,M_00001_00004],aux73)
sumgeq([-3,M_00001_00004],aux73)
sumleq([M_00003_00002,-1],aux74)
sumgeq([M_00003_00002,-1],aux74)
sumleq([M_00002_00004,-3],aux75)
sumgeq([M_00002_00004,-3],aux75)
sumleq([M_00003_00004,-3],aux76)
sumgeq([M_00003_00004,-3],aux76)
sumleq([-1,M_00001_00003],aux77)
sumgeq([-1,M_00001_00003],aux77)
weightedsumleq([1,5],[-19,M_00001_00004],aux78)
weightedsumgeq([1,5],[-19,M_00001_00004],aux78)
weightedsumleq([1,5],[-9,M_00001_00003],aux79)
weightedsumgeq([1,5],[-9,M_00001_00003],aux79)
sumleq([M_00004_00002,-1],aux80)
sumgeq([M_00004_00002,-1],aux80)
**EOF**
